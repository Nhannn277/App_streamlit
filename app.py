import os
import io
import pickle
import base64
import numpy as np
import pandas as pd
import pandas as pd
import streamlit as st
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns # type: ignore
from sklearn.tree import plot_tree # type: ignore
from streamlit_option_menu import option_menu # type: ignore
from sklearn.tree import DecisionTreeClassifier # type: ignore
from sklearn.neighbors import KNeighborsClassifier # type: ignore
from sklearn.model_selection import train_test_split # type: ignore
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay # type: ignore
from sklearn.linear_model import LinearRegression, LogisticRegression # type: ignore
from sklearn.preprocessing import  OneHotEncoder, OrdinalEncoder, LabelEncoder # type: ignore
from controller.cleanDataController import (
    remove_col, 
    label_encode, 
    ordinal_encode, 
    one_hot_encode, 
    handle_duplicates, 
    get_download_link, 
    save_dataset,
    remove_outliers, 
    check_outliers_plot, 
    convert_column_dtype, 
    fill_null_values
)

st.set_page_config(page_title="Health Assistant",
                   layout="wide",
                   page_icon="üßë‚Äç‚öïÔ∏è")



working_dir = os.path.dirname(os.path.abspath(__file__))

heart_disease_model = pickle.load(open(f'{working_dir}/saved_models/heart_disease_model.sav', 'rb'))

with st.sidebar:
    selected = option_menu('Menu',
                           ['Upload CSV',
                            'Heart Disease Prediction',
                            'Clean Data'],
                           menu_icon='hospital-fill',
                           icons=['cloud-upload', 'heart','data'],
                           default_index=0)


#----------------------------------------------------------------------------------------------------------    

if selected == 'Upload CSV':
    
    st.title('Upload CSV')

    uploaded_files = st.file_uploader("Choose a CSV file", accept_multiple_files=True)
    
    if uploaded_files:
        for uploaded_file in uploaded_files:
            df = pd.read_csv(uploaded_file)
            st.write(uploaded_file.name)
            st.write(df.head(1))
            col1, col2 = st.columns(2)
  
        ml_algorithm = st.sidebar.selectbox("Ch·ªçn thu·∫≠t to√°n", ["Linear Regression", "Logistic Regression", "KNN", "Decision Tree"])

        if ml_algorithm == "Linear Regression":
            dependent_var = st.sidebar.selectbox("Ch·ªçn bi·∫øn ph·ª• thu·ªôc", df.columns)
            independent_vars = st.sidebar.multiselect("Ch·ªçn bi·∫øn ƒë·ªôc l·∫≠p", df.columns.drop(dependent_var))

            if st.sidebar.button("D·ª± ƒëo√°n"):
                X = df[independent_vars]
                y = df[dependent_var]

                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                model = LinearRegression()
                model.fit(X_train, y_train)

                y_pred = model.predict(X_test)

                st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n vs Gi√° tr·ªã th·ª±c t·∫ø")
                result_df = pd.DataFrame({"Th·ª±c t·∫ø": y_test, "D·ª± ƒëo√°n": y_pred})
                st.write(result_df)

                plt.figure(figsize=(10, 6))
                sns.scatterplot(x=y_test, y=y_pred)
                sns.lineplot(x=y_test, y=y_test, color='red', label='Linear line')
                plt.xlabel("Th·ª±c t·∫ø")
                plt.ylabel("D·ª± ƒëo√°n")
                plt.title("Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n vs Th·ª±c t·∫ø")
                plt.legend()
                st.pyplot(plt)

        elif ml_algorithm == "Logistic Regression":
            dependent_var = st.sidebar.selectbox("Ch·ªçn bi·∫øn ph·ª• thu·ªôc (Ch·ªâ ph√¢n lo·∫°i)", df.columns)
            independent_vars = st.sidebar.multiselect("Ch·ªçn bi·∫øn ƒë·ªôc l·∫≠p", df.columns.drop(dependent_var))

            if st.sidebar.button("D·ª± ƒëo√°n"):
                X = df[independent_vars]
                y = df[dependent_var]

                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                model = LogisticRegression()
                model.fit(X_train, y_train)

                y_pred = model.predict(X_test)

                st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n")
                result_df = pd.DataFrame({"Th·ª±c t·∫ø": y_test, "D·ª± ƒëo√°n": y_pred})
                st.write(result_df)

                plt.figure(figsize=(10, 6))
                sns.heatmap(pd.crosstab(y_test, y_pred), annot=True, fmt='d')
                plt.title("Ma tr·∫≠n Confusion")
                plt.xlabel("D·ª± ƒëo√°n")
                plt.ylabel("Th·ª±c t·∫ø")
                st.pyplot(plt)

        elif ml_algorithm == "KNN":
            dependent_var = st.sidebar.selectbox("Ch·ªçn bi·∫øn ph·ª• thu·ªôc (Ch·ªâ ph√¢n lo·∫°i)", df.columns)
            independent_vars = st.sidebar.multiselect("Ch·ªçn bi·∫øn ƒë·ªôc l·∫≠p", df.columns.drop(dependent_var))

            if st.sidebar.button("D·ª± ƒëo√°n"):
                X = df[independent_vars]
                y = df[dependent_var]

                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                model = KNeighborsClassifier()
                model.fit(X_train, y_train)

                y_pred = model.predict(X_test)

                st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n")
                result_df = pd.DataFrame({"Th·ª±c t·∫ø": y_test, "D·ª± ƒëo√°n": y_pred})
                st.write(result_df)
                plt.figure(figsize=(10, 6))
                sns.heatmap(pd.crosstab(y_test, y_pred), annot=True, fmt='d')
                plt.title("Ma tr·∫≠n Confusion")
                plt.xlabel("D·ª± ƒëo√°n")
                plt.ylabel("Th·ª±c t·∫ø")
                st.pyplot(plt)
        elif ml_algorithm == "Decision Tree":
            dependent_var = st.sidebar.selectbox("Ch·ªçn bi·∫øn ph·ª• thu·ªôc (Ch·ªâ ph√¢n lo·∫°i)", df.columns)
            independent_vars = st.sidebar.multiselect("Ch·ªçn bi·∫øn ƒë·ªôc l·∫≠p", df.columns.drop(dependent_var))

            if st.sidebar.button("D·ª± ƒëo√°n"):
                X = df[independent_vars]
                y = df[dependent_var]

                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

                model = DecisionTreeClassifier()
                model.fit(X_train, y_train)

                y_pred = model.predict(X_test)

                st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n")
                result_df = pd.DataFrame({"Th·ª±c t·∫ø": y_test, "D·ª± ƒëo√°n": y_pred})
                st.write(result_df)

                # In ra c√¢y quy·∫øt ƒë·ªãnh
                plt.figure(figsize=(20, 10))
                plot_tree(model, filled=True, feature_names=X.columns.tolist(), class_names=y.unique().tolist())
                st.pyplot(plt)      

    
#---------------
if selected == 'Heart Disease Prediction':

    # page title#
    st.title('Heart Disease Prediction using ML')

#     col1, col2, col3 = st.columns(3)

#     with col1:
#         age = st.text_input('Tu·ªïi')

#     with col2:
#         sex = st.text_input('Gi·ªõi t√≠nh (1 = Nam, 0 = N·ªØ)')

#     with col3:
#         cp = st.text_input('Lo·∫°i ƒëau ng·ª±c')

#     with col1:
#         trestbps = st.text_input('Huy·∫øt √°p l√∫c ngh·ªâ (t√≠nh b·∫±ng mm Hg)')

#     with col2:
#         chol = st.text_input('Cholestoral mg/dl')

#     with col3:
#         fbs = st.text_input('ƒê∆∞·ªùng trong m√°u > 120 mg/dl (1 = true; 0 = false)')

#     with col1:
#         restecg = st.text_input('K·∫øt qu·∫£ ƒëi·ªán t√¢m ƒë·ªì l√∫c ngh·ªâ ng∆°i')

#     with col2:
#         thalach = st.text_input('Nh·ªãp tim t·ªëi ƒëa ƒë·∫°t ƒë∆∞·ª£c')

#     with col3:
#         exang = st.text_input('T·∫≠p th·ªÉ d·ª•c c√≥ g√¢y ƒëau t·∫Øc ng·ª±c kh√¥ng (1 = C√≥; 0 = Kh√¥ng)')

#     with col1:
#         oldpeak = st.text_input('Ch√™nh l·ªách ƒëoan ST trong khi t·∫≠p th·ªÉ d·ª•c so v·ªõi l√∫c ngh·ªâ')

#     with col2:
#         slope = st.text_input('ƒê·ªô d·ªëc t·∫°i ƒë·ªânh c·ªßa ƒëo·∫°n ST khi t·∫≠p th·ªÉ d·ª•c')

#     with col3:
#         ca = st.text_input('S·ªë l∆∞·ª£ng ƒëo·∫°n m·∫°ch ch√≠nh')

#     with col1:
#         thal = st.text_input('1 = b√¨nh th∆∞·ªùng, 2 = l·ªói c·ªë ƒë·ªãnh, 3 = khi·∫øm khuy·∫øt c√≥ th·ªÉ ƒë·∫£o ng∆∞·ª£c')

#     # code for Prediction
#     heart_diagnosis = ''

#     # creating a button for Prediction

#     if st.button('D·ª± ƒëo√°n b·ªánh tim'):

#         user_input = [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]

#         user_input = [float(x) for x in user_input]

#         heart_prediction = heart_disease_model.predict([user_input])

#         if heart_prediction[0] == 1:
#             heart_diagnosis = 'Ng∆∞·ªùi n√†y c√≥ m·∫Øc b·ªánh tim'
#         else:
#             heart_diagnosis = 'Ng∆∞·ªùi n√†y kh√¥ng m·∫Øc b·ªánh tim'

#     st.success(heart_diagnosis)

#----------------------------------------------------------------------------------------------------------    

if selected == 'Clean Data':
    
    st.title('Clean Data')

    
    uploaded_files = st.file_uploader("Choose a CSV file", accept_multiple_files=True)
    

    if uploaded_files:
        
        for uploaded_file in uploaded_files:
            df = pd.read_csv(uploaded_file)

             # Ki·ªÉm tra n·∫øu session state ch∆∞a t·ªìn t·∫°i, kh·ªüi t·∫°o m·ªõi
            if 'my_df' not in st.session_state:
                st.session_state.my_df = pd.DataFrame()
                st.session_state.my_df = df.copy()

            if 'deleted_columns' not in st.session_state:
                st.session_state.deleted_columns = [] 

            col1, col2 = st.columns(2)

            with col1:
                st.header(f"{df.shape[1]} h√†ng ƒë·∫ßu")
                st.write(df.head(df.shape[1]))
                st.write(f" ( {df.shape[0]} H√†ng, {df.shape[1]} C·ªôt )") 

            with col2: 
                st.header("Ki·ªÉu d·ªØ li·ªáu")
                st.write(df.dtypes)

            # Hi·ªÉn th·ªã m√¥ t·∫£ d·ªØ li·ªáu
            st.header("M√¥ t·∫£ d·ªØ li·ªáu:")
            st.write(df.describe())
        
            # Ki·ªÉm tra missing values v√† hi·ªÉn th·ªã
            st.header("Ki·ªÉm tra missing values:")
            missing_values = df.isnull().sum().to_frame().T

            if missing_values.empty:
                st.write("Kh√¥ng c√≥ missing values trong dataset.")
            else:
                st.write(missing_values)

            tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs(["Remove Columns", 
                                                                        "Fill Null Values", 
                                                                        "Handle duplicates", 
                                                                        "Remove Rows with Null", 
                                                                        "Change Data Types", 
                                                                        "Check Outliers", 
                                                                        "Encode Categorical Variables", 
                                                                        "Save dataset"])

            with tab1:
                st.write("Remove Columns")
                unwanted_col = st.multiselect("Remove column", st.session_state.my_df.columns, key="deleted_columns")
                if st.button('Remove'):
                    st.session_state.my_df = remove_col(st.session_state.my_df, unwanted_col)
                    st.session_state.deleted_columns.extend(unwanted_col)
                    st.write(st.session_state.my_df.head(5))

            with tab2:
                st.header("Fill Null Values")
                st.write(st.session_state.my_df.head(5))
                st.write("Choose columns to fill null values")
                selected_columns = st.multiselect("Columns", st.session_state.my_df.columns, key="fill_null_values")
                if st.button('Fill Null Values'):
                    # √Åp d·ª•ng h√†m fill_null_values cho c√°c c·ªôt ƒë√£ ch·ªçn
                    filled_df = fill_null_values(st.session_state.my_df, selected_columns)
                    # C·∫≠p nh·∫≠t l·∫°i DataFrame
                    st.session_state.my_df = filled_df
                    st.write("Null values filled for selected columns")
                    st.write(st.session_state.my_df.head(5))

            
            with tab3:
                st.header("Handle Duplicates")

                if st.button("Handle Duplicates"):
                    
                    duplicate = st.session_state.my_df[st.session_state.my_df.duplicated(keep=False)]
                    
                    if duplicate.empty:
                        st.write("Don't have duplicate")
                    else:
                        st.write('row sum: {}'.format(len(st.session_state.my_df)))
                        #st.write('Have {} duplicates'.format(df.duplicated().sum()))  
                        
                        st.session_state.my_df = handle_duplicates(st.session_state.my_df)
                        
                        st.write('number of goods remaining after processing', len(st.session_state.my_df))
                                    


            with tab4:
                st.header("Remove Rows with Null")
                
                col1 , col2 = st.columns(2)

                with col1:
                    st.write("Ki·ªÉm tra missing values")
                    st.write(st.session_state.my_df.isnull().sum().to_frame().T)

                with col2:

                    selected_columns = st.multiselect("Select columns to remove rows with null values:", st.session_state.my_df.columns, key="RemoveRowsNull")
                    
                    # L·∫•y mask cho c√°c h√†ng c√≥ gi√° tr·ªã null trong c√°c c·ªôt ƒë√£ ch·ªçn
                    mask = st.session_state.my_df[selected_columns].isnull().any(axis=1)
                    
                    # L·∫•y DataFrame ch·ª©a c√°c h√†ng c√≥ gi√° tr·ªã null
                    rows_with_null = st.session_state.my_df[mask]
                    
                    if st.button("Remove Rows with Null"):
                        # X√≥a c√°c h√†ng c√≥ gi√° tr·ªã null
                        st.session_state.my_df = st.session_state.my_df.drop(rows_with_null.index)
                        st.write("Rows with null values removed successfully.")
            
            with tab5:
                st.header("Change Data Types")
                st.write("Choose column and new data type:")

                # Hi·ªÉn th·ªã danh s√°ch c√°c c·ªôt v√† ki·ªÉu d·ªØ li·ªáu hi·ªán t·∫°i
                st.write("Current data types:")
                st.write(st.session_state.my_df.dtypes.to_frame().T)

                selected_column = st.selectbox("Column to convert", st.session_state.my_df.columns, key="convert_column")
                new_dtype = st.selectbox("New data type", ["int32", "int64", "float32", "float64", "object"], key="new_dtype")

                if st.button("Convert"):
                    # √Åp d·ª•ng h√†m convert_column_dtype cho c·ªôt ƒë∆∞·ª£c ch·ªçn
                    st.session_state.my_df = convert_column_dtype(st.session_state.my_df, selected_column, new_dtype)
                    st.write(f"Converted column '{selected_column}' to {new_dtype}")
                    st.write(st.session_state.my_df.dtypes)
                
            with tab6:
                st.header("Check Outliers")

                col1, col2 = st.columns(2)

                with col1: 
                    st.write("Choose column to check outliers")
                    selected_column = st.selectbox("Column", st.session_state.my_df.columns, key="outlier_select")

                with col2: 
                    # t·∫°o 1 container ch·ª©a bi·ªÉu ƒë·ªì trong tr∆∞·ªùng h·ª£p c√≥ outlier
                    container_diagram =  st.empty()
                    
                    with container_diagram.container():
                        check_outliers_plot(st.session_state.my_df, selected_column)
                        
                    if st.button('Handle Outliers'):
                        st.session_state.my_df = remove_outliers(df, selected_column)
                        st.write('remove successfully')
                        # sau khi remove successfully th√¨ container s·∫Ω ƒë∆∞·ª£c l√†m r·ªóng
                        container_diagram.empty()
            with tab7:
                st.header("Encode Categorical Variables")
                
                # L·ª±a ch·ªçn ph∆∞∆°ng ph√°p m√£ h√≥a t·ª´ ng∆∞·ªùi d√πng
                encode_method = st.selectbox("Select encoding method:", ["One-Hot Encoding", "Ordinal Encoding", "Label Encoding"])

                # M√£ h√≥a d·ªØ li·ªáu theo ph∆∞∆°ng ph√°p ƒë∆∞·ª£c ch·ªçn
                if encode_method == "One-Hot Encoding":
                    column = st.selectbox("Select column to encode:", st.session_state.my_df.columns)
                    df_encoded = one_hot_encode(st.session_state.my_df, column)
                elif encode_method == "Ordinal Encoding":
                    column = st.selectbox("Select column to encode:", st.session_state.my_df.columns)
                    df_encoded = ordinal_encode(st.session_state.my_df, column)
                else:  # Label Encoding
                    column = st.selectbox("Select column to encode:", st.session_state.my_df.columns)
                    df_encoded = label_encode(st.session_state.my_df, column)

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                
                st.write("Encoded DataFrame:")
                st.write(df_encoded)

                if st.button('Save'):
                    st.session_state.my_df = df_encoded

            with tab8:
                st.header("Save dataset")

                # Ki·ªÉm tra n·∫øu c√≥ DataFrame v√† ƒë√£ clean data
                if 'my_df' in st.session_state and st.session_state.my_df is not None:
                    st.write("Your cleaned dataset:")
                    st.write(st.session_state.my_df.head())
                    
                    # X√°c ƒë·ªãnh t√™n file m·∫∑c ƒë·ªãnh
                    default_filename = None
                    if uploaded_files:
                        # N·∫øu c√≥ file t·∫£i l√™n, s·ª≠ d·ª•ng t√™n file ƒë·∫ßu ti√™n k√®m theo "_cleaned.csv"
                        default_filename = uploaded_files[0].name.split('.')[0] + "_cleaned.csv"
                    filename = st.text_input("Enter a filename to save as:", default_filename)
                    # Th√™m n√∫t ƒë·ªÉ l∆∞u dataset
                    if st.button("Save Cleaned Dataset"):
                        
                        if filename.strip() == "":
                            st.warning("Please enter a valid filename.")
                        else:
                            save_dataset(st.session_state.my_df, filename)
                            
                            # Hi·ªÉn th·ªã link ƒë·ªÉ t·∫£i file v·ªÅ
                            download_link = get_download_link(st.session_state.my_df, filename, "Click here to download the cleaned dataset")
                            st.markdown(download_link, unsafe_allow_html=True)
                else:
                    if st.session_state.my_df is None:
                        st.warning("No cleaned dataset available. Please clean your data first.")
            
    
    
            
            
            
            

        
    


    



    
    

    
